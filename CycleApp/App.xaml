<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="CycleApp.App" StartupUri="MainWindow.xaml">
	<Application.Resources>

		<SolidColorBrush x:Key="Button.Icon.Face" Color="#FF404040" />

		<SolidColorBrush x:Key="RoundButton.Face" Color="#FFEEEEEE" />
		<SolidColorBrush x:Key="RoundButton.Border" Color="#FF707070" />
		<SolidColorBrush x:Key="RoundButton.Checked" Color="#FF81B9E8" />

		<Style x:Key="FocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD" />
		<SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
		<SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
		<SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
		<SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
		<SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
		<SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
		<SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
		<SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
		<Style x:Key="ButtonStyleRound" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
			<Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
			<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Padding" Value="1" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid Margin="0">
							<Rectangle x:Name="preview" HorizontalAlignment="Left" Height="45.333" Margin="-8,-8.833,-5.667,-8.5" RadiusY="0" RadiusX="0" Stroke="{x:Null}" VerticalAlignment="Top" Width="89.667" Fill="#FFF0F0F0" />
							<Rectangle x:Name="light_edge" Fill="{x:Null}" HorizontalAlignment="Stretch" Height="Auto" Margin="0" RadiusY="5" RadiusX="5" VerticalAlignment="Stretch" Width="Auto">
								<Rectangle.Stroke>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#CFFFFFFF" Offset="0" />
										<GradientStop Color="#CCFFFFFF" Offset="1" />
										<GradientStop Offset="0.487" />
									</LinearGradientBrush>
								</Rectangle.Stroke>
							</Rectangle>
							<Rectangle x:Name="gap" HorizontalAlignment="Stretch" Height="Auto" Margin="1" RadiusY="4" RadiusX="4" VerticalAlignment="Stretch" Width="Auto" Fill="{x:Null}">
								<Rectangle.Stroke>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#A5000000" Offset="0" />
										<GradientStop Color="#A3000000" Offset="1" />
									</LinearGradientBrush>
								</Rectangle.Stroke>
							</Rectangle>
							<Rectangle x:Name="face" HorizontalAlignment="Stretch" Height="Auto" Margin="2" RadiusY="3.5" RadiusX="3.5" VerticalAlignment="Stretch" Width="Auto" Stroke="{x:Null}">
								<Rectangle.Fill>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FFF4F4F4" Offset="0" />
										<GradientStop Color="#FFD1D1D1" Offset="1" />
										<GradientStop Color="#FFDDDDDD" Offset="0.448" />
										<GradientStop Color="#FECFCFCF" Offset="0.517" />
									</LinearGradientBrush>
								</Rectangle.Fill>
							</Rectangle>
							<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" />
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsDefaulted" Value="true" />
							<Trigger Property="IsMouseOver" Value="true" />
							<Trigger Property="IsPressed" Value="true" />
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="BaseRoundButtonStyle" TargetType="{x:Type ButtonBase}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
			<Setter Property="Background" Value="{StaticResource RoundButton.Face}" />
			<Setter Property="BorderBrush" Value="{StaticResource RoundButton.Border}" />
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="VerticalContentAlignment" Value="Center" />
			<Setter Property="Padding" Value="1" />
			<Setter Property="Opacity" Value="1.0" />
			<Setter Property="Focusable" Value="false" />
			<Setter Property="Width" Value="32" />
			<Setter Property="Height" Value="32" />
			<Setter Property="Margin" Value="4" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ButtonBase}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="Storyboard"/>
						</ControlTemplate.Resources>
						<Grid x:Name="grid" Margin="0" Opacity="0.6">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualStateGroup.Transitions>
										<VisualTransition GeneratedDuration="0:0:0.6"/>
										<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.6" To="Normal"/>
										<VisualTransition From="Normal" GeneratedDuration="0:0:0.3" To="MouseOver"/>
									</VisualStateGroup.Transitions>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Ellipse Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" Height="Auto" Margin="0" Stroke="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" Width="Auto" />
							<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Grid>
						<ControlTemplate.Triggers>
							<!--							<Trigger Property="IsDefaulted" Value="true" /> -->
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Opacity" Value="1.0" />
								<Setter Property="Opacity" TargetName="grid" Value="1"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter TargetName="contentPresenter" Property="RenderTransform">
									<Setter.Value>
										<TranslateTransform X="1" Y="1"></TranslateTransform>
									</Setter.Value>
								</Setter>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
							</Trigger>
<!--							<Trigger Property="ToggleButton.IsChecked">
								<Setter Property="Background" Value="Blue" />
							</Trigger> -->
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseRoundButtonStyle}">
		</Style>

		<Style x:Key="RoundToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseRoundButtonStyle}">
			<Style.Triggers>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Background" Value="{StaticResource RoundButton.Checked}" />
				</Trigger>
			</Style.Triggers>
		</Style>

	</Application.Resources>
</Application>
